/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define L1 1
#define L2 2
#define L3 3

&mt {
  tapping-term-ms = <300>;
};

&lt {
  tapping-term-ms = <300>;
};

/ {
	behaviors {
    tdl: tap_dance_l {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_L";
      #binding-cells = <0>;
			tapping-term-ms = <300>;
      bindings = <&mt LALT LPAR>, <&kp LBKT>;
    };
    tdr: tap_dance_r {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_R";
      #binding-cells = <0>;
			tapping-term-ms = <300>;
      bindings = <&mt RALT RPAR>, <&kp RBKT>;
    };
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
// --------------------------------------------------------------------------------------
// | TAB      | Q | W | E     | R       | T     | Y  | U       | I     | O | P |  -     |
// | CTRL/ESC | A | S | D     | F       | G     | H  | J       | K     | L | ; | CTRL/' |
// | SHFT/{   | Z | X | C     | V       | B     | N  | M       | ,     | . | / | SHFT/} |
//                    | ALT/( | LWR/SPC |  GUI/BSPC  | RSE/RET | ALT/) |
      bindings = <
        &kp TAB        &kp Q       &kp W &kp E      &kp R &kp T &kp Y &kp U &kp I      &kp O &kp P        &kp MINUS
        &mt LCTRL ESC  &kp A       &kp S &kp D      &kp F &kp G &kp H &kp J &kp K      &kp L &kp SEMI     &mt RCTRL SQT
        &mt LSHFT LBRC &kp Z       &kp X &kp C      &kp V &kp B &kp N &kp M &kp COMMA  &kp DOT   &kp FSLH &mt RSHFT RBRC
        &tdl           &lt L1 SPC  &mt LGUI ESC  &lt L2 RET &tdr
      >;
    };

    lower_layer {
// -------------------------------------------------------
// | `    | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 |  =   |
// | BSPC | 6 | 7 | 8 | 9 | 0 |   |   |   |   |   | BSPC |
// |      |   |   |   |   |   |   |   |   |   |   |  \   |
//                |   |       |   |   |
      bindings = <
        &kp GRAVE &kp N1 &kp N2 &kp N3  &kp N4    &kp N5 &kp N6   &kp N7    &kp N8    &kp N9  &kp N0   &kp EQUAL
        &kp DEL   &trans &trans &trans  &trans    &trans &kp HOME &kp PG_DN &kp PG_UP &kp END &kp BSLH &kp BSPC
        &trans    &trans &trans &trans  &trans    &trans &trans   &trans    &trans    &trans  &trans   &trans
        &trans    &trans &trans &mo L3  &trans
      >;
    };

    raise_layer {
// ---------------------------------------------------------------
// | ~    | ! | @ | # | $ | % |  ^  |  &  |  *  |  (  | ) |  +   |
// | BSPC | ^ | & | * | [ | ] | LFT | DWN |  UP | RGT | : | BSPC |
// |      |   |   |   |   |   |     |     |     |     |   |  |   |
//                |   |   |         |     |
      bindings = <
        &kp TILDE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT &kp CARET &kp AMPS &kp STAR &kp LPAR  &kp RPAR &kp PLUS
        &kp DEL   &trans   &trans &trans   &trans   &trans    &kp LEFT  &kp DOWN &kp UP   &kp RIGHT &kp PIPE &kp BSPC
        &trans    &trans   &trans &trans   &trans   &trans    &trans    &trans   &trans   &trans    &trans   &trans
        &trans    &mo L3   &trans &trans   &trans
      >;
    };

    adjust_layer {
// ----------------------------------------------------------------------------------
// | ? | ?    | ?    | ?    | RESET |  ?  | BT1 | BT2  | BT3  | BT4  | BT5 | BT CLR |
// | ? | ?    | ?    | ?    | ?     |  ?  |     |      |      |      |     |        |
// |   | MUTE | VOL- | VOL+ |       | BLE |     | PLAY | PREV | NEXT |     |        |
//                   |      |       |           |      |      |
      bindings = <
        &kp F11 &kp F1     &kp F2       &kp F3       &kp F4 &kp F5       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
        &kp F12 &kp F6     &kp F7       &kp F8       &kp F9 &kp F10      &bootloader  &reset       &none        &none        &none        &none
        &none   &kp K_MUTE &kp C_VOL_DN &kp C_VOL_UP &none  &out OUT_TOG &none        &kp C_PP     &kp C_PREV   &kp C_NEXT   &none        &none
        &trans  &trans     &trans       &trans       &trans
      >;
    };
  };
};

// vi: ft=c
